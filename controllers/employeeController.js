const Employee = require("../models/Employee");
const User = require("../models/User");
const bcrypt = require("bcrypt");

// üìå 1.1. T·∫°o nh√¢n vi√™n m·ªõi
exports.createEmployee = async (req, res) => {
  try {
    const { name, email, phone, password, position } = req.body;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u
    const passwordHash = await bcrypt.hash(password, 10);

    // T·∫°o user m·ªõi v·ªõi role EMPLOYEE
    const newUser = new User({
      name,
      email,
      phone,
      passwordHash,
      role: "EMPLOYEE",
    });
    await newUser.save();

    // T·∫°o nh√¢n vi√™n v·ªõi userId
    const newEmployee = new Employee({
      userId: newUser._id,
      position,
    });
    await newEmployee.save();

    res.status(201).json({ message: "Nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c t·∫°o", employee: newEmployee });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi t·∫°o nh√¢n vi√™n", error });
  }
};

// üìå 1.2. L·∫•y danh s√°ch nh√¢n vi√™n
exports.getEmployees = async (req, res) => {
  try {
    const employees = await Employee.find()
      .populate("userId", "name email phone role")
      .select("position status tasksCompleted");
    res.status(200).json(employees);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch nh√¢n vi√™n", error });
  }
};
