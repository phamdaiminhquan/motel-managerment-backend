const mongoose = require("mongoose");
const Task = require("../models/Task");
const Expense = require("../models/Expense");

// üìå 1.1. T·∫°o nhi·ªám v·ª• m·ªõi
exports.createTask = async (req, res) => {
  try {
    const { description, houseId, roomId, priority, assignedTo } = req.body;

    // Chuy·ªÉn ƒë·ªïi houseId v√† roomId th√†nh ObjectId n·∫øu c√≥
    const taskData = {
      description,
      priority: priority || "MEDIUM",
    };

    if (houseId) {
      if (!mongoose.Types.ObjectId.isValid(houseId)) {
        return res.status(400).json({ message: "houseId kh√¥ng h·ª£p l·ªá" });
      }
      taskData.houseId = new mongoose.Types.ObjectId(houseId);
    }

    if (roomId) {
      if (!mongoose.Types.ObjectId.isValid(roomId)) {
        return res.status(400).json({ message: "roomId kh√¥ng h·ª£p l·ªá" });
      }
      taskData.roomId = new mongoose.Types.ObjectId(roomId);
    }

    if (assignedTo) {
      if (!mongoose.Types.ObjectId.isValid(assignedTo)) {
        return res.status(400).json({ message: "assignedTo kh√¥ng h·ª£p l·ªá" });
      }
      taskData.assignedTo = new mongoose.Types.ObjectId(assignedTo);
    }

    const newTask = new Task(taskData);
    await newTask.save();

    res.status(201).json({ message: "Nhi·ªám v·ª• ƒë√£ ƒë∆∞·ª£c t·∫°o", task: newTask });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi t·∫°o nhi·ªám v·ª•", error });
  }
};


// üìå 1.2. Nh·∫≠n nhi·ªám v·ª•
exports.assignTask = async (req, res) => {
  try {
    const { assignedTo } = req.body;
    const { taskId } = req.params;

    const task = await Task.findById(taskId);
    if (!task) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nhi·ªám v·ª•" });

    task.assignedTo = assignedTo;
    task.status = "ASSIGNED";
    await task.save();

    res.status(200).json({ message: "Nhi·ªám v·ª• ƒë√£ ƒë∆∞·ª£c giao", task });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi nh·∫≠n nhi·ªám v·ª•", error });
  }
};

// üìå 1.3. B·∫Øt ƒë·∫ßu th·ª±c hi·ªán nhi·ªám v·ª•
exports.startTask = async (req, res) => {
  try {
    const { taskId } = req.params;

    const task = await Task.findById(taskId);
    if (!task) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nhi·ªám v·ª•" });

    task.status = "IN_PROGRESS";
    task.startTime = new Date();
    await task.save();

    res.status(200).json({ message: "Nhi·ªám v·ª• ƒë√£ b·∫Øt ƒë·∫ßu", task });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi b·∫Øt ƒë·∫ßu nhi·ªám v·ª•", error });
  }
};

// üìå 1.4. Ho√†n t·∫•t nhi·ªám v·ª•

exports.completeTask = async (req, res) => {
  try {
    const { taskId } = req.params;
    const { costIncurred, expenses } = req.body;

    const task = await Task.findById(taskId);
    if (!task) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nhi·ªám v·ª•" });

    task.status = "COMPLETED";
    task.completionTime = new Date();
    task.costIncurred = costIncurred;

    // N·∫øu c√≥ chi ph√≠, l∆∞u v√†o collection `expenses`
    if (costIncurred && expenses.length > 0) {
      const newExpenses = expenses.map(expense => ({
        taskId: task._id,
        description: expense.description,
        amount: expense.amount,
      }));
      await Expense.insertMany(newExpenses); // ‚úÖ L∆∞u v√†o b·∫£ng `expenses`
    }

    await task.save();
    res.status(200).json({ message: "Nhi·ªám v·ª• ƒë√£ ho√†n t·∫•t", task });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi ho√†n t·∫•t nhi·ªám v·ª•", error });
  }
};


// üìå 1.5. H·ªßy nhi·ªám v·ª•
exports.cancelTask = async (req, res) => {
  try {
    const { taskId } = req.params;
    const { reason } = req.body;

    const task = await Task.findById(taskId);
    if (!task) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nhi·ªám v·ª•" });

    task.status = "CANCELED";
    task.cancelReason = reason;
    await task.save();

    res.status(200).json({ message: "Nhi·ªám v·ª• ƒë√£ b·ªã h·ªßy", task });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi h·ªßy nhi·ªám v·ª•", error });
  }
};

// üìå 3.1. L·∫•y danh s√°ch nhi·ªám v·ª• theo tr·∫°ng th√°i
exports.getTasks = async (req, res) => {
  try {
    const { status, assignedTo } = req.query;
    let filter = {};

    if (status) filter.status = status;
    if (assignedTo) filter.assignedTo = assignedTo;

    const tasks = await Task.find(filter)
      .select("description priority status assignedTo startTime completionTime cancelReason") // ‚úÖ Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
      .populate("assignedTo", "name email")
      .lean(); // ‚úÖ Gi·∫£m t·∫£i b·ªô nh·ªõ b·∫±ng c√°ch tr·∫£ v·ªÅ Plain JS Object

    res.status(200).json(tasks);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch nhi·ªám v·ª•", error });
  }
};


// üìå 3.2. L·∫•y chi ti·∫øt m·ªôt nhi·ªám v·ª•
exports.getTaskById = async (req, res) => {
  try {
    const { taskId } = req.params;
    const task = await Task.findById(taskId);
    if (!task) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nhi·ªám v·ª•" });

    res.status(200).json(task);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y th√¥ng tin nhi·ªám v·ª•", error });
  }
};
